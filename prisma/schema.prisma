// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  name          String?
  email         String        @unique
  password      String
  number        String?
  role          Role          @default(public)
  createdAt     DateTime      @default(now())
  leaderReports Report[]
  waterTests    WaterTest[]
  hotspots      Hotspot[]
  leaderAlerts  LeaderAlert[]
  Playbook      Playbook[]
  Story         Story[]
  Testimonial   Testimonial[]
}

enum Role {
  public
  asha
  leader
  admin
}

model Report {
  id        String       @id @default(uuid())
  name      String
  location  String
  latitude  Float?
  longitude Float?
  date      DateTime
  mapArea   Json
  photoUrl  String
  comment   String?
  leaderId  String
  leader    User         @relation(fields: [leaderId], references: [id])
  status    ReportStatus @default(awaiting)
  progress  Int          @default(0)
  createdAt DateTime     @default(now())
}

enum ReportStatus {
  awaiting
  in_progress
  resolved
}

model WaterTest {
  id            String        @id @default(uuid())
  waterbodyName String
  waterbodyId   String?
  dateTime      DateTime
  location      String
  latitude      Float?
  longitude     Float?
  photoUrl      String
  notes         String
  quality       WaterQuality
  ashaId        String
  asha          User          @relation(fields: [ashaId], references: [id])
  createdAt     DateTime      @default(now())
  leaderAlerts  LeaderAlert[]
  globalAlerts  GlobalAlert[]
}

enum WaterQuality {
  good
  medium
  high
  disease
}

model LeaderAlert {
  id          String    @id @default(uuid())
  leaderId    String
  leader      User      @relation(fields: [leaderId], references: [id])
  message     String
  waterTestId String
  waterTest   WaterTest @relation(fields: [waterTestId], references: [id])
  createdAt   DateTime  @default(now())
}

model GlobalAlert {
  id          String    @id @default(uuid())
  message     String
  waterTestId String
  waterTest   WaterTest @relation(fields: [waterTestId], references: [id])
  createdAt   DateTime  @default(now())
}

model Hotspot {
  id          String   @id @default(uuid())
  name        String
  description String?
  location    String
  latitude    Float?
  longitude   Float?
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
}

enum ContentSource {
  local
  llm
}

model Playbook {
  id          String        @id @default(uuid())
  title       String
  content     String
  source      ContentSource @default(local)
  createdById String?
  createdBy   User?         @relation(fields: [createdById], references: [id])
  createdAt   DateTime      @default(now())
}

model Story {
  id          String        @id @default(uuid())
  title       String
  content     String
  source      ContentSource @default(local)
  createdById String?
  createdBy   User?         @relation(fields: [createdById], references: [id])
  createdAt   DateTime      @default(now())
}

model Testimonial {
  id         String   @id @default(uuid())
  content    String
  authorName String?
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}
